package servlet;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import core.Category;
import core.Watch;
import dao.WatchDAO;

/**
 * Servlet implementation class CartServlet
 */
public class CartServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public CartServlet() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.getWriter().append("Served at: ").append(request.getContextPath());

		String id = request.getParameter("id");
		String action = request.getParameter("action");
		String totalAllParam = request.getParameter("getTotalAll");
		double getTotalAll = 0; // Default value or any other appropriate default

		if (totalAllParam != null && !totalAllParam.trim().isEmpty()) {
		    try {
		        getTotalAll = Double.parseDouble(totalAllParam);
		    } catch (NumberFormatException e) {
		        // Handle the case where the parameter is not a valid double
		        e.printStackTrace(); // Log the exception or perform other error handling
		    }
		}
		try {
			int xid = Integer.parseInt(id);

			HttpSession sessionCart = request.getSession();
			ArrayList<Watch> cart = (ArrayList<Watch>) sessionCart.getAttribute("cart");
			// Double.parseDouble(sGetTotalAll);
			if (cart == null) {
				cart = new ArrayList<>();
				sessionCart.setAttribute("cart", cart);
			}
			Watch watch = WatchDAO.getProductById(xid);
			
			if (watch != null) {
				if (action != null && action.equals("remove")) {
			        if (!cart.isEmpty()) {
			            for (Watch cartWatch : cart) {
			                if (cartWatch.getWatchId() == xid) {
			                    // Subtract the total of the removed product from the overall total
			                    getTotalAll -= cartWatch.getTotal();
			                    cart.remove(cartWatch);
			                    break;
			                }
			            }

			            // If the cart is empty after removing the product, set total to 0
			            if (cart.isEmpty()) {
			                getTotalAll = 0;
			            }
			        }
				    sessionCart.setAttribute("getTotalAll", getTotalAll);
					request.getRequestDispatcher("cart.jsp").forward(request, response);
				} else {
					
					// Check if the product already exists in the cart
					boolean productExists = false;

					for (Watch cartWatch : cart) {
						if (cartWatch.getWatchId() == xid) {
							// If the product exists, increase its quantity
							cartWatch.setQuantity(cartWatch.getQuantity() + 1);
							productExists = true;
							break;
						}

					}

					// If the product doesn't exist, add it to the cart
					if (!productExists) {
						cart.add(watch);
						watch.setQuantity(1);
					}
					for (Watch cartWatch : cart) {
						getTotalAll += cartWatch.getTotal();
					}
				}
				int size = cart.size();
				// Set the updated cart in the session
				sessionCart.setAttribute("cart", cart);
				sessionCart.setAttribute("size", size);
				// Set the watchList in the request to be used in JSP
				sessionCart.setAttribute("watchList", cart);
				sessionCart.setAttribute("getTotalAll", getTotalAll);
			}

			request.getRequestDispatcher("index.jsp").forward(request, response);
		
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
