/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-12-13 10:44:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class checkout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("  <title>Checkout</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("  <style>\r\n");
      out.write("    body {\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("    }\r\n");
      out.write("    .container {\r\n");
      out.write("      background-color: #ffffff;\r\n");
      out.write("      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("      border-radius: 10px;\r\n");
      out.write("      padding: 40px;\r\n");
      out.write("      margin-top: 50px;\r\n");
      out.write("    }\r\n");
      out.write("    h4 {\r\n");
      out.write("      color: #007bff;\r\n");
      out.write("    }\r\n");
      out.write("    label {\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary {\r\n");
      out.write("      background-color: #007bff;\r\n");
      out.write("      border-color: #007bff;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary:hover {\r\n");
      out.write("      background-color: #0056b3;\r\n");
      out.write("      border-color: #0056b3;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <div class=\"row\">\r\n");
      out.write("    <div class=\"col-md-6 order-md-2 mb-4\">\r\n");
      out.write("      <h4 class=\"d-flex justify-content-between align-items-center mb-3\">\r\n");
      out.write("        <span class=\"text-muted\">Your cart</span>\r\n");
      out.write("        <span class=\"badge badge-secondary badge-pill\">3</span>\r\n");
      out.write("      </h4>\r\n");
      out.write("      <ul class=\"list-group mb-3\">\r\n");
      out.write("        <li class=\"list-group-item d-flex justify-content-between lh-condensed\">\r\n");
      out.write("          <div>\r\n");
      out.write("            <h6 class=\"my-0\">Product name</h6>\r\n");
      out.write("            <small class=\"text-muted\">Brief description</small>\r\n");
      out.write("          </div>\r\n");
      out.write("          <span class=\"text-muted\">$12</span>\r\n");
      out.write("        </li>\r\n");
      out.write("        <!-- Add more items as needed -->\r\n");
      out.write("        <li class=\"list-group-item d-flex justify-content-between\">\r\n");
      out.write("          <span>Total (USD)</span>\r\n");
      out.write("          <strong>$12</strong>\r\n");
      out.write("        </li>\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"col-md-6 order-md-1\">\r\n");
      out.write("      <h4 class=\"mb-3\">Billing address</h4>\r\n");
      out.write("      <form class=\"needs-validation\" novalidate>\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("          <div class=\"col-md-6 mb-3\">\r\n");
      out.write("            <label for=\"firstName\">First name</label>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"firstName\" placeholder=\"\" value=\"\" required>\r\n");
      out.write("            <div class=\"invalid-feedback\">\r\n");
      out.write("              Valid first name is required.\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"col-md-6 mb-3\">\r\n");
      out.write("            <label for=\"lastName\">Last name</label>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"lastName\" placeholder=\"\" value=\"\" required>\r\n");
      out.write("            <div class=\"invalid-feedback\">\r\n");
      out.write("              Valid last name is required.\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"mb-3\">\r\n");
      out.write("          <label for=\"username\">Username</label>\r\n");
      out.write("          <div class=\"input-group\">\r\n");
      out.write("            <div class=\"input-group-prepend\">\r\n");
      out.write("              <span class=\"input-group-text\">@</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Username\" required>\r\n");
      out.write("            <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n");
      out.write("              Your username is required.\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Additional input fields for billing address -->\r\n");
      out.write("        <div class=\"mb-3\">\r\n");
      out.write("          <label for=\"address\">Address</label>\r\n");
      out.write("          <input type=\"text\" class=\"form-control\" id=\"address\" placeholder=\"1234 Main St\" required>\r\n");
      out.write("          <div class=\"invalid-feedback\">\r\n");
      out.write("            Please enter your shipping address.\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Additional input fields for payment details -->\r\n");
      out.write("        <div class=\"mb-3\">\r\n");
      out.write("          <label for=\"creditCard\">Credit Card</label>\r\n");
      out.write("          <input type=\"text\" class=\"form-control\" id=\"creditCard\" placeholder=\"1234 5678 9012 3456\" required>\r\n");
      out.write("          <div class=\"invalid-feedback\">\r\n");
      out.write("            Please enter your credit card number.\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <hr class=\"mb-4\">\r\n");
      out.write("        <button class=\"btn btn-primary btn-lg btn-block\" type=\"submit\">Continue to checkout</button>\r\n");
      out.write("      </form>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
